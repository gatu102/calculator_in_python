import tkinter as tk
from tkinter import messagebox, scrolledtext, filedialog
import math

class PolishedScientificCalculator:
    def __init__(self, root):
        self.root = root
        self.root.title("Polished Scientific Calculator")
        self.root.geometry("550x650")
        self.root.resizable(False, False)
        self.expression = ""
        self.memory = 0
        self.history = []

        self.create_display()
        self.create_history_panel()
        self.create_buttons()
        self.root.bind("<Key>", self.on_keypress)

    # ------------------ Display & History ------------------
    def create_display(self):
        self.entry = tk.Entry(self.root, font=("Arial", 24), borderwidth=2, relief="ridge")
        self.entry.pack(fill="both", ipadx=8, pady=10, padx=10)

    def create_history_panel(self):
        self.history_panel = scrolledtext.ScrolledText(self.root, height=8, state='disabled', font=("Arial", 12))
        self.history_panel.pack(fill='both', padx=10, pady=5)

    # ------------------ Buttons ------------------
    def create_buttons(self):
        btns_frame = tk.Frame(self.root)
        btns_frame.pack()
        self.buttons = [
            ['7','8','9','/','√','!'],
            ['4','5','6','*','^','%'],
            ['1','2','3','-','sin','cos'],
            ['0','.','=','+','tan','log'],
            ['AC','C','M+','M-','MR','ln','Export']
        ]
        self.button_colors = {
            "numbers":"#d3d3d3",
            "operators":"#ffb347",
            "scientific":"#add8e6",
            "memory":"#90ee90",
            "others":"#f0f0f0"
        }

        for r, row in enumerate(self.buttons):
            row_frame = tk.Frame(btns_frame)
            row_frame.pack(expand=True, fill="both")
            for c, btn_text in enumerate(row):
                color = self.get_color(btn_text)
                btn = tk.Button(row_frame, text=btn_text, font=("Arial", 16), width=6, height=2,
                                bg=color, activebackground="yellow",
                                command=lambda x=btn_text: self.on_click(x))
                btn.grid(row=r, column=c, sticky="nsew", padx=2, pady=2)

    def get_color(self, text):
        if text in "0123456789.": return self.button_colors["numbers"]
        elif text in "+-*/^%//": return self.button_colors["operators"]
        elif text in ['√','!','sin','cos','tan','log','ln']: return self.button_colors["scientific"]
        elif text in ['M+','M-','MR']: return self.button_colors["memory"]
        else: return self.button_colors["others"]

    # ------------------ Button & Key Actions ------------------
    def on_click(self, char):
        if char == 'C': self.clear_entry()
        elif char == 'AC': self.clear_all()
        elif char == '=': self.calculate()
        elif char in ['M+','M-','MR']: self.memory_actions(char)
        elif char == 'Export': self.export_history()
        else: self.insert_expression(char)

    def on_keypress(self, event):
        key = event.char
        if key in '0123456789.+-*/%^':
            self.insert_expression(key)
        elif key == '\r': self.calculate()
        elif key == '\x08':  # Backspace
            self.expression = self.expression[:-1]
            self.update_entry()

    def insert_expression(self, char):
        self.expression += char
        self.update_entry()

    def update_entry(self):
        self.entry.delete(0, tk.END)
        self.entry.insert(0, self.expression)

    def clear_entry(self):
        self.expression = ""
        self.update_entry()

    def clear_all(self):
        self.expression = ""
        self.history.clear()
        self.update_entry()
        self.update_history_panel()

    def memory_actions(self, action):
        try:
            val = float(self.entry.get())
        except: val = 0
        if action == 'M+': self.memory += val
        elif action == 'M-': self.memory -= val
        elif action == 'MR': self.insert_expression(str(self.memory))

    # ------------------ Calculation ------------------
    def calculate(self):
        try:
            expr = self.expression
            expr = expr.replace('^','**').replace('√','math.sqrt(')+')'*(self.expression.count('√'))
            expr = self.replace_factorial(expr)
            for func in ['sin','cos','tan']:
                expr = expr.replace(func,f"math.{func}(math.radians")
            expr = expr.replace('log','math.log10').replace('ln','math.log')
            result = eval(expr)
            self.expression = str(result)
            self.update_entry()
            self.history.append(f"{expr} = {result}")
            self.update_history_panel()
        except Exception as e:
            messagebox.showerror("Error", f"Invalid Expression!\n{e}")
            self.clear_entry()

    def replace_factorial(self, expr):
        while '!' in expr:
            idx = expr.index('!')
            start = idx-1
            while start>=0 and (expr[start].isdigit() or expr[start]=='.'):
                start -=1
            number = expr[start+1:idx]
            expr = expr[:start+1] + f"math.factorial(int({number}))" + expr[idx+1:]
        return expr

    # ------------------ History ------------------
    def update_history_panel(self):
        self.history_panel.config(state='normal')
        self.history_panel.delete(1.0, tk.END)
        self.history_panel.insert(tk.END, "\n".join(self.history[-20:]))
        self.history_panel.config(state='disabled')

    def export_history(self):
        if not self.history:
            messagebox.showinfo("Export History","No history to export.")
            return
        file = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files","*.txt")])
        if file:
            with open(file, "w") as f:
                f.write("\n".join(self.history))
            messagebox.showinfo("Export History", f"History exported to {file}")

# ------------------ Run ------------------
if __name__ == "__main__":
    root = tk.Tk()
    PolishedScientificCalculator(root)
    root.mainloop()
