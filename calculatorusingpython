import tkinter as tk
from tkinter import messagebox, scrolledtext, filedialog
import math


class PolishedScientificCalculator:
    def __init__(self, root: tk.Tk):
        self.root = root
        self.root.title("üìê Polished Scientific Calculator")
        self.root.geometry("550x650")
        self.root.resizable(False, False)

        # State variables
        self.expression = ""
        self.memory = 0
        self.history = []

        # Display field
        self.entry = tk.Entry(root, font=("Arial", 24), borderwidth=2, relief="ridge", justify="right")
        self.entry.pack(fill="both", ipadx=8, pady=10, padx=10)

        # History panel
        self.history_panel = scrolledtext.ScrolledText(root, height=8, state='disabled', font=("Arial", 12))
        self.history_panel.pack(fill='both', padx=10, pady=5)

        # Button layout
        self.buttons = [
            ['7', '8', '9', '/', '‚àö', '!'],
            ['4', '5', '6', '*', '^', '%'],
            ['1', '2', '3', '-', 'sin', 'cos'],
            ['0', '.', '=', '+', 'tan', 'log'],
            ['AC', 'C', 'M+', 'M-', 'MR', 'ln', 'Export']
        ]

        # Button color categories
        self.button_colors = {
            "numbers": "#d3d3d3",
            "operators": "#ffb347",
            "scientific": "#add8e6",
            "memory": "#90ee90",
            "others": "#f0f0f0"
        }

        # Create button grid
        self.create_buttons()

        # Keyboard support
        self.root.bind("<Key>", self.on_keypress)

    # ---------------- UI ---------------- #
    def create_buttons(self):
        """Generate calculator buttons dynamically."""
        btns_frame = tk.Frame(self.root)
        btns_frame.pack(expand=True, fill="both")

        for r, row in enumerate(self.buttons):
            row_frame = tk.Frame(btns_frame)
            row_frame.pack(expand=True, fill="both")

            for c, btn_text in enumerate(row):
                color = self.get_color(btn_text)
                btn = tk.Button(
                    row_frame, text=btn_text, font=("Arial", 16), width=6, height=2,
                    bg=color, activebackground="yellow",
                    command=lambda x=btn_text: self.on_click(x)
                )
                btn.grid(row=r, column=c, sticky="nsew", padx=2, pady=2)

        # Responsive grid
        for i in range(7):
            btns_frame.rowconfigure(i, weight=1)
            btns_frame.columnconfigure(i, weight=1)

    def get_color(self, text: str) -> str:
        """Assign colors based on button type."""
        if text.isdigit() or text == '.':
            return self.button_colors["numbers"]
        elif text in "+-*/^%//":
            return self.button_colors["operators"]
        elif text in ['‚àö', '!', 'sin', 'cos', 'tan', 'log', 'ln']:
            return self.button_colors["scientific"]
        elif text in ['M+', 'M-', 'MR']:
            return self.button_colors["memory"]
        else:
            return self.button_colors["others"]

    # ---------------- Button Actions ---------------- #
    def on_click(self, char: str):
        """Handle button clicks."""
        if char == 'C':
            self.clear_entry()
        elif char == 'AC':
            self.clear_all()
        elif char == '=':
            self.calculate()
        elif char == 'M+':
            self.memory_add()
        elif char == 'M-':
            self.memory_subtract()
        elif char == 'MR':
            self.memory_recall()
        elif char == 'Export':
            self.export_history()
        else:
            self.append_to_expression(char)

    def on_keypress(self, event):
        """Support keyboard input."""
        key = event.char
        if key in '0123456789.+-*/%^':
            self.append_to_expression(key)
        elif key == '\r':  # Enter
            self.calculate()
        elif key == '\x08':  # Backspace
            self.expression = self.expression[:-1]
            self.update_entry(self.expression)

    # ---------------- Expression Handling ---------------- #
    def append_to_expression(self, value: str):
        """Append characters to expression."""
        self.expression += value
        self.entry.insert(tk.END, value)

    def clear_entry(self):
        """Clear only the current entry."""
        self.expression = ""
        self.entry.delete(0, tk.END)

    def clear_all(self):
        """Clear entry and history."""
        self.clear_entry()
        self.history = []
        self.update_history_panel()

    # ---------------- Memory Functions ---------------- #
    def memory_add(self):
        try:
            self.memory += float(self.entry.get())
        except ValueError:
            pass

    def memory_subtract(self):
        try:
            self.memory -= float(self.entry.get())
        except ValueError:
            pass

    def memory_recall(self):
        self.append_to_expression(str(self.memory))

    # ---------------- Calculation ---------------- #
    def calculate(self):
        try:
            expr = self.transform_expression(self.expression)
            result = eval(expr, {"math": math})
            self.update_entry(str(result))
            self.history.append(f"{self.expression} = {result}")
            self.update_history_panel()
            self.expression = str(result)
        except Exception as e:
            messagebox.showerror("Error", f"Invalid Expression!\n{e}")
            self.clear_entry()

    def transform_expression(self, expr: str) -> str:
        """Replace symbols with valid Python math expressions."""
        expr = expr.replace('^', '**')
        expr = expr.replace('‚àö', 'math.sqrt(') + ')' * expr.count('‚àö')
        expr = self.replace_factorial(expr)
        expr = expr.replace('sin', 'math.sin(math.radians')
        expr = expr.replace('cos', 'math.cos(math.radians')
        expr = expr.replace('tan', 'math.tan(math.radians')
        expr = expr.replace('log', 'math.log10')
        expr = expr.replace('ln', 'math.log')
        return expr

    def replace_factorial(self, expr: str) -> str:
        """Convert 'n!' into math.factorial(n)."""
        while '!' in expr:
            idx = expr.index('!')
            start = idx - 1
            while start >= 0 and (expr[start].isdigit() or expr[start] == '.'):
                start -= 1
            number = expr[start + 1:idx]
            expr = expr[:start + 1] + f"math.factorial(int({number}))" + expr[idx + 1:]
        return expr

    # ---------------- History ---------------- #
    def update_history_panel(self):
        """Update history display."""
        self.history_panel.config(state='normal')
        self.history_panel.delete(1.0, tk.END)
        self.history_panel.insert(tk.END, "\n".join(self.history[-20:]))
        self.history_panel.config(state='disabled')

    def export_history(self):
        """Export calculation history to file."""
        if not self.history:
            messagebox.showinfo("Export History", "No history to export.")
            return
        file = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files", "*.txt")])
        if file:
            with open(file, "w") as f:
                f.write("\n".join(self.history))
            messagebox.showinfo("Export History", f"History exported to {file}")

    # ---------------- Helpers ---------------- #
    def update_entry(self, value: str):
        """Update entry field."""
        self.entry.delete(0, tk.END)
        self.entry.insert(0, value)


if __name__ == "__main__":
    root = tk.Tk()
    polished_calc = PolishedScientificCalculator(root)
    root.mainloop()
