import tkinter as tk
from tkinter import messagebox, scrolledtext
import math
from datetime import datetime


class ScientificCalculator:
    def __init__(self, root):
        self.root = root
        self.root.title("Scientific Calculator")
        self.root.geometry("520x650")
        self.root.resizable(False, False)
        self.expression = ""
        self.memory = 0.0
        self.history = []

        # --- Display ---
        self.entry = tk.Entry(
            root, font=("Consolas", 24), borderwidth=4, relief="ridge", justify="right"
        )
        self.entry.pack(fill="x", ipadx=8, ipady=12, pady=10, padx=10)

        # --- History Panel ---
        self.history_panel = scrolledtext.ScrolledText(
            root, height=7, state="disabled", font=("Consolas", 12)
        )
        self.history_panel.pack(fill="both", padx=10, pady=5)

        # --- Buttons ---
        self.create_buttons()

    # ----------------------------------------------------------
    # BUTTONS
    # ----------------------------------------------------------
    def create_buttons(self):
        btns_frame = tk.Frame(self.root, bg="#f0f0f0")
        btns_frame.pack(expand=True, fill="both")

        buttons = [
            ["7", "8", "9", "/", "√", "!"],
            ["4", "5", "6", "*", "^", "%"],
            ["1", "2", "3", "-", "sin", "cos"],
            ["0", ".", "=", "+", "tan", "log"],
            ["AC", "C", "M+", "M-", "MR", "ln"],
            ["π", "e", "(", ")", "x²", "x³"],
        ]

        for r, row in enumerate(buttons):
            for c, text in enumerate(row):
                tk.Button(
                    btns_frame,
                    text=text,
                    font=("Segoe UI", 14, "bold"),
                    width=6,
                    height=2,
                    bg="#dcdcdc" if text not in ["=", "AC", "C"] else "#ffcccb",
                    activebackground="#b0e0e6",
                    command=lambda x=text: self.on_click(x),
                ).grid(row=r, column=c, padx=3, pady=3, sticky="nsew")

        for i in range(6):
            btns_frame.rowconfigure(i, weight=1)
            btns_frame.columnconfigure(i, weight=1)

    # ----------------------------------------------------------
    # LOGIC HANDLERS
    # ----------------------------------------------------------
    def on_click(self, char):
        if char == "C":  # Clear current entry
            self.entry.delete(0, tk.END)
            self.expression = ""
            return

        if char == "AC":  # All clear
            self.entry.delete(0, tk.END)
            self.expression = ""
            self.history.clear()
            self.update_history_panel()
            return

        if char == "=":
            self.calculate()
            return

        if char in {"M+", "M-", "MR"}:
            self.memory_ops(char)
            return

        if char in {"√", "!", "sin", "cos", "tan", "log", "ln", "x²", "x³"}:
            self.insert_function(char)
            return

        if char in {"π", "e"}:
            self.entry.insert(tk.END, str(math.pi if char == "π" else math.e))
            self.expression += str(math.pi if char == "π" else math.e)
            return

        self.entry.insert(tk.END, char)
        self.expression += str(char)

    def insert_function(self, func):
        mapping = {
            "√": "sqrt(",
            "!": "factorial(",
            "sin": "sin(",
            "cos": "cos(",
            "tan": "tan(",
            "log": "log10(",
            "ln": "log(",
            "x²": "**2",
            "x³": "**3",
        }

        if func in {"x²", "x³"}:
            self.entry.insert(tk.END, mapping[func])
            self.expression += mapping[func]
        elif func == "!":
            self.entry.insert(tk.END, "!")
            self.expression += "!"
        else:
            self.entry.insert(tk.END, func + "(")
            self.expression += mapping[func]

    def memory_ops(self, op):
        try:
            val = float(self.entry.get() or 0)
            if op == "M+":
                self.memory += val
            elif op == "M-":
                self.memory -= val
            elif op == "MR":
                self.entry.insert(tk.END, str(self.memory))
                self.expression += str(self.memory)
            self.show_status(f"Memory: {self.memory:.2f}")
        except ValueError:
            messagebox.showerror("Error", "Invalid memory operation!")

    # ----------------------------------------------------------
    # CALCULATIONS
    # ----------------------------------------------------------
    def calculate(self):
        try:
            expr = self.entry.get().replace("^", "**")

            # Safe math replacements
            expr = expr.replace("sqrt", "math.sqrt")
            expr = expr.replace("factorial", "math.factorial")
            expr = expr.replace("sin", "math.sin(math.radians")
            expr = expr.replace("cos", "math.cos(math.radians")
            expr = expr.replace("tan", "math.tan(math.radians")
            expr = expr.replace("log10", "math.log10")
            expr = expr.replace("log", "math.log")

            # Fix unmatched parentheses
            if expr.count("(") > expr.count(")"):
                expr += ")" * (expr.count("(") - expr.count(")"))

            # Factorial cleanup
            expr = self.replace_factorials(expr)

            result = eval(expr, {"math": math})
            self.entry.delete(0, tk.END)
            self.entry.insert(tk.END, str(result))
            self.history.append(f"[{datetime.now().strftime('%H:%M:%S')}] {self.expression} = {result}")
            self.update_history_panel()
            self.expression = str(result)
        except Exception as e:
            messagebox.showerror("Error", f"Invalid Expression:\n{e}")
            self.entry.delete(0, tk.END)
            self.expression = ""

    def replace_factorials(self, expr):
        while "!" in expr:
            idx = expr.index("!")
            num_end = idx
            num_start = idx - 1
            while num_start >= 0 and (expr[num_start].isdigit() or expr[num_start] in "."):
                num_start -= 1
            number = expr[num_start + 1:num_end]
            expr = expr[:num_start + 1] + f"math.factorial(int({number}))" + expr[num_end + 1:]
        return expr

    # ----------------------------------------------------------
    # HISTORY PANEL
    # ----------------------------------------------------------
    def update_history_panel(self):
        self.history_panel.config(state="normal")
        self.history_panel.delete(1.0, tk.END)
        for entry in reversed(self.history[-15:]):
            self.history_panel.insert(tk.END, entry + "\n")
        self.history_panel.config(state="disabled")

    def show_status(self, msg):
        self.root.title(f"Scientific Calculator — {msg}")


if __name__ == "__main__":
    root = tk.Tk()
    app = ScientificCalculator(root)
    root.mainloop()
