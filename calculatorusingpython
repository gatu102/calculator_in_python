import tkinter as tk
from tkinter import messagebox, scrolledtext, filedialog
import math

class PolishedScientificCalculator:
    def __init__(self, root):
        self.root = root
        self.root.title("Polished Scientific Calculator")
        self.root.geometry("550x650")
        self.root.resizable(False, False)
        self.expression = ""
        self.memory = 0
        self.history = []

        # Display
        self.entry = tk.Entry(root, font=("Arial", 24), borderwidth=2, relief="ridge")
        self.entry.pack(fill="both", ipadx=8, pady=10, padx=10)

        # History panel
        self.history_panel = scrolledtext.ScrolledText(root, height=8, state='disabled', font=("Arial", 12))
        self.history_panel.pack(fill='both', padx=10, pady=5)

        # Buttons frame
        btns_frame = tk.Frame(root)
        btns_frame.pack()

        self.buttons = [
            ['7','8','9','/','√','!'],
            ['4','5','6','*','^','%'],
            ['1','2','3','-','sin','cos'],
            ['0','.','=','+','tan','log'],
            ['AC','C','M+','M-','MR','ln','Export']
        ]

        self.button_colors = {
            "numbers":"#d3d3d3",
            "operators":"#ffb347",
            "scientific":"#add8e6",
            "memory":"#90ee90",
            "others":"#f0f0f0"
        }

        for r, row in enumerate(self.buttons):
            row_frame = tk.Frame(btns_frame)
            row_frame.pack(expand=True, fill="both")
            for c, btn_text in enumerate(row):
                color = self.get_color(btn_text)
                btn = tk.Button(row_frame, text=btn_text, font=("Arial", 16), width=6, height=2,
                                bg=color, activebackground="yellow",
                                command=lambda x=btn_text: self.on_click(x))
                btn.grid(row=r, column=c, sticky="nsew", padx=2, pady=2)

        # Grid weight
        for i in range(7):
            btns_frame.rowconfigure(i, weight=1)
            btns_frame.columnconfigure(i, weight=1)

        # Keyboard support
        self.root.bind("<Key>", self.on_keypress)

    def get_color(self, text):
        if text in "0123456789.":
            return self.button_colors["numbers"]
        elif text in "+-*/^%//":
            return self.button_colors["operators"]
        elif text in ['√','!','sin','cos','tan','log','ln']:
            return self.button_colors["scientific"]
        elif text in ['M+','M-','MR']:
            return self.button_colors["memory"]
        else:
            return self.button_colors["others"]

    def on_click(self, char):
        self.flash_button(char)
        if char == 'C':
            self.expression = ""
            self.entry.delete(0, tk.END)
        elif char == 'AC':
            self.expression = ""
            self.entry.delete(0, tk.END)
            self.history = []
            self.update_history_panel()
        elif char == '=':
            self.calculate()
        elif char == 'M+':
            try: self.memory += float(self.entry.get())
            except: pass
        elif char == 'M-':
            try: self.memory -= float(self.entry.get())
            except: pass
        elif char == 'MR':
            self.expression += str(self.memory)
            self.entry.insert(tk.END, str(self.memory))
        elif char == 'Export':
            self.export_history()
        else:
            self.expression += char
            self.entry.insert(tk.END, char)

    def flash_button(self, char):
        # Optional: implement visual flash effect if desired
        pass

    def on_keypress(self, event):
        key = event.char
        if key in '0123456789.+-*/%^':
            self.expression += key
            self.entry.insert(tk.END, key)
        elif key == '\r':
            self.calculate()
        elif key == '\x08':
            self.expression = self.expression[:-1]
            self.entry.delete(0, tk.END)
            self.entry.insert(0, self.expression)

    def calculate(self):
        try:
            expr = self.expression.replace('^','**').replace('//','//')
            expr = expr.replace('√','math.sqrt(')+')'*(self.expression.count('√'))
            expr = self.replace_factorial(expr)
            expr = expr.replace('sin','math.sin(math.radians')
            expr = expr.replace('cos','math.cos(math.radians')
            expr = expr.replace('tan','math.tan(math.radians')
            expr = expr.replace('log','math.log10')
            expr = expr.replace('ln','math.log')

            result = eval(expr)
            self.entry.delete(0, tk.END)
            self.entry.insert(tk.END, str(result))
            self.history.append(f"{self.expression} = {result}")
            self.update_history_panel()
            self.expression = str(result)
        except Exception as e:
            messagebox.showerror("Error", f"Invalid Expression!\n{e}")
            self.entry.delete(0, tk.END)
            self.expression = ""

    def replace_factorial(self, expr):
        while '!' in expr:
            idx = expr.index('!')
            start = idx-1
            while start >=0 and (expr[start].isdigit() or expr[start]=='.'):
                start -=1
            number = expr[start+1:idx]
            expr = expr[:start+1] + f"math.factorial(int({number}))" + expr[idx+1:]
        return expr

    def update_history_panel(self):
        self.history_panel.config(state='normal')
        self.history_panel.delete(1.0, tk.END)
        self.history_panel.insert(tk.END, "\n".join(self.history[-20:]))
        self.history_panel.config(state='disabled')

    def export_history(self):
        if not self.history:
            messagebox.showinfo("Export History","No history to export.")
            return
        file = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files","*.txt")])
        if file:
            with open(file, "w") as f:
                f.write("\n".join(self.history))
            messagebox.showinfo("Export History", f"History exported to {file}")


if __name__ == "__main__":
    root = tk.Tk()
    polished_calc = PolishedScientificCalculator(root)
    root.mainloop()
